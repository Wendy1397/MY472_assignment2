# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
<<<<<<< HEAD
# Define a function named 'calculate_area' that takes a single argument 'data'
calculate_area <- function(data) {
=======
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
<<<<<<< HEAD
>>>>>>> c1d0ac82be77dda30aceaafc69561877c7d66baf
=======
>>>>>>> dev
>>>>>>> dev
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
<<<<<<< HEAD
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
=======
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
<<<<<<< HEAD
>>>>>>> c1d0ac82be77dda30aceaafc69561877c7d66baf
=======
>>>>>>> dev
>>>>>>> dev
return(transformed_data)
}
# Load the built-in 'iris' dataset
data(iris)
# Use the function to calculate petal area
<<<<<<< HEAD
iris_with_petal_area <- calculate_area(iris)
# Print the transformed data
print(iris_with_petal_area)
=======
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_setal_area <- calculate_area(iris,"setal_area")
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
# Load the built-in 'iris' dataset
data(iris)
# Use the function to calculate petal area
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_sepal_area <- calculate_area(iris,"setal_area")
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
# Load the built-in 'iris' dataset
data(iris)
# Use the function to calculate petal area
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_sepal_area <- calculate_area(iris,"sepal_area")
# Print the transformed data
print(iris_with_petal_area)
print(iris_with_setal_area)
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
# Load the built-in 'iris' dataset
data(iris)
# Use the function to calculate petal area
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_sepal_area <- calculate_area(iris,"sepal_area")
# Print the transformed data
print(iris_with_petal_area)
print(iris_with_sepal_area)
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
Print( "Below would show the function woul work based on differernt conditional argument inputs.")
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
print( "Below would show the function woul work based on differernt conditional argument inputs.")
# Load the built-in 'iris' dataset
data(iris)
# Use the function to calculate petal area
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_sepal_area <- calculate_area(iris,"sepal_area")
# Print the transformed data
print(iris_with_petal_area)
print(iris_with_sepal_area)
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
library(dplyr)
# Define a function named 'calculate_area' that takes 2 arguments 'data' and 'transformation_type'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
print( "Below would show the function woul work based on differernt conditional argument inputs.")
# Load the built-in 'iris' dataset
data(iris)
# Use the function to calculate petal area
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_sepal_area <- calculate_area(iris,"sepal_area")
# Print the transformed data
print(iris_with_petal_area)
print(iris_with_sepal_area)
print(calculate_area(iris,"petal_area"))
<<<<<<< HEAD
>>>>>>> c1d0ac82be77dda30aceaafc69561877c7d66baf
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
library(dplyr)
# Define a function named 'calculate_area' that takes a single argument 'data'
calculate_area <- function(data, transformation_type) {
# Check if 'data' is a data frame
if (!is.data.frame(data)) {
stop("Input data must be a data frame.")
}
# Use a conditional statement to perform different data transformations
if (transformation_type == "petal_area") {
# Use mutate to calculate petal area and add it as a new column
transformed_data <- data %>%
mutate(Petal_Area = Petal.Length * Petal.Width)
} else if (transformation_type == "sepal_area") {
transformed_data <- data %>%
mutate(Sepal_Area = Sepal.Length * Sepal.Width)
} else {
stop("Invalid transformation_type. Use 'petal_area' or 'sepal_area'.")
}
return(transformed_data)
}
print( "Below would show the function woul work based on differernt conditional argument inputs.")
# Load the built-in 'iris' dataset
data(iris)
#Use the function to calculate petal area
iris_with_petal_area <- calculate_area(iris,"petal_area")
iris_with_sepal_area <- calculate_area(iris,"sepal_area")
# Print the transformed data
print(iris_with_petal_area)
print(iris_with_sepal_area)
=======
>>>>>>> dev
>>>>>>> dev
